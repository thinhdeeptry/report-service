import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { ReportsService } from './reports.service';

@Injectable()
export class ReportsCronService {
  private readonly logger = new Logger(ReportsCronService.name);

  constructor(private readonly reportsService: ReportsService) {}

  // Tạo báo cáo hàng ngày vào lúc 00:01
  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)
  async handleDailyReport() {
    this.logger.debug('Generating daily report...');
    try {
      // Sử dụng ID của hệ thống cho báo cáo tự động
      const systemUserId = 'system';
      await this.reportsService.generateReport(systemUserId);
      this.logger.debug('Daily report generated successfully');
    } catch (error) {
      this.logger.error('Failed to generate daily report', error);
    }
  }

  // Tạo báo cáo hàng tuần vào Chủ nhật lúc 00:05
  @Cron('5 0 * * 0')
  async handleWeeklyReport() {
    this.logger.debug('Generating weekly report...');
    try {
      const systemUserId = 'system';
      const now = new Date();
      const createReportDto = {
        title: `Báo cáo tuần - ${now.toLocaleDateString('vi-VN')}`,
        date: now.toISOString(),
        data: await this.getWeeklyReportData(),
        isAutoGenerated: true,
        generatedBy: systemUserId,
      };
      await this.reportsService.create(createReportDto);
      this.logger.debug('Weekly report generated successfully');
    } catch (error) {
      this.logger.error('Failed to generate weekly report', error);
    }
  }

  // Tạo báo cáo hàng tháng vào ngày đầu tiên của tháng lúc 00:10
  @Cron('10 0 1 * *')
  async handleMonthlyReport() {
    this.logger.debug('Generating monthly report...');
    try {
      const systemUserId = 'system';
      const now = new Date();
      const createReportDto = {
        title: `Báo cáo tháng - ${now.toLocaleDateString('vi-VN')}`,
        date: now.toISOString(),
        data: await this.getMonthlyReportData(),
        isAutoGenerated: true,
        generatedBy: systemUserId,
      };
      await this.reportsService.create(createReportDto);
      this.logger.debug('Monthly report generated successfully');
    } catch (error) {
      this.logger.error('Failed to generate monthly report', error);
    }
  }

  private async getWeeklyReportData() {
    // Lấy dữ liệu từ các endpoint
    const paymentStats = await this.reportsService.fetchPaymentStats();
    const enrollmentStats = await this.reportsService.fetchEnrollmentStats();
    const courseStats = await this.reportsService.fetchCourseStats();

    // Tạo dữ liệu báo cáo tuần
    return {
      revenue: {
        total: paymentStats.totalRevenue,
        last30Days: paymentStats.revenueLast30Days,
        averageTransaction: paymentStats.averageTransactionValue,
        failedRate: paymentStats.failedTransactionsRate,
        byMethod: paymentStats.paymentMethodsBreakdown,
      },
      enrollments: {
        total: enrollmentStats.totalEnrollments,
        last30Days: enrollmentStats.newEnrollmentsLast30Days,
        dropoutRate: enrollmentStats.dropoutRate,
        byCourse: enrollmentStats.enrollmentsByCourse,
        averageTimeToComplete: enrollmentStats.averageTimeToComplete,
        completionRate: enrollmentStats.averageCompletionRate,
      },
      courses: {
        total: courseStats.totalCourses,
        active: courseStats.activeCourses,
        completionRate: courseStats.averageCompletionRate,
        popular: courseStats.popularCourses,
        viewsLast30Days: courseStats.viewsLast30Days,
      },
      reportType: 'weekly',
    };
  }

  private async getMonthlyReportData() {
    // Lấy dữ liệu từ các endpoint
    const paymentStats = await this.reportsService.fetchPaymentStats();
    const enrollmentStats = await this.reportsService.fetchEnrollmentStats();
    const courseStats = await this.reportsService.fetchCourseStats();

    // Tạo dữ liệu báo cáo tháng
    return {
      revenue: {
        total: paymentStats.totalRevenue,
        last30Days: paymentStats.revenueLast30Days,
        averageTransaction: paymentStats.averageTransactionValue,
        failedRate: paymentStats.failedTransactionsRate,
        byMethod: paymentStats.paymentMethodsBreakdown,
      },
      enrollments: {
        total: enrollmentStats.totalEnrollments,
        last30Days: enrollmentStats.newEnrollmentsLast30Days,
        dropoutRate: enrollmentStats.dropoutRate,
        byCourse: enrollmentStats.enrollmentsByCourse,
        averageTimeToComplete: enrollmentStats.averageTimeToComplete,
        completionRate: enrollmentStats.averageCompletionRate,
      },
      courses: {
        total: courseStats.totalCourses,
        active: courseStats.activeCourses,
        completionRate: courseStats.averageCompletionRate,
        popular: courseStats.popularCourses,
        viewsLast30Days: courseStats.viewsLast30Days,
      },
      reportType: 'monthly',
    };
  }
}
